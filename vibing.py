# Generated by vibing.py
def generate_fibonacci(n):
    return [0, 1] + [generate_fibonacci(n - 1)[-1] + generate_fibonacci(n - 2)[-1] for _ in range(n - 1)]

# Usage
print(generate_fibonacci(10))  # Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
name = input("Enter your name: ")
print(f"Hello, {name}!")
a, b = 0, 1
for _ in range(10):
    print(a)
    a, b = b, a + b
f = lambda x: [i ** 2 for i in range(x)]
def greet(name):
  print(f"Hello, {name}!")

greet("Alice")
print([x**2 for x in range(1, 11)])
print([x ** 2 for x in range(1, 11)])
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
print("Hello, World!")
def generate_fib(n):
    fib_seq = [0, 1]
    while len(fib_seq) < n:
        fib_seq.append(fib_seq[-1] + fib_seq[-2])
    return fib_seq[:n]

# Example usage:
print(generate_fib(10))  # Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
squares = [x ** 2 for x in range(1, 11)]
print(squares)
factorial = lambda n: 1 if n == 0 else n * factorial(n-1)
def generate_fibonacci(n):
    fib_seq = [0, 1]
    while len(fib_seq) < n:
        fib_seq.append(fib_seq[-1] + fib_seq[-2])
    return fib_seq[:n]

# Test the function
print(generate_fibonacci(10))  # Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
def generate_squares(n):
    return [i ** 2 for i in range(1, n + 1)]

print(generate_squares(5))  # Output: [1, 4, 9, 16, 25]
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
def generate(n):
  a, b = 0, 1
  for _ in range(n):
    yield a
    a, b = b, a + b

print(list(generate(10)))
def greet(name):
    print(f"Hello, {name}!")

greet("World")
def generate_squares(n):
    return [i ** 2 for i in range(n)]

print(generate_squares(10))  # Output: [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
squares = [x**2 for x in range(10)]
print(squares)
factorial = lambda n: 1 if n == 0 else n * factorial(n-1)
fibo = lambda n: [0, 1] + [fibo[n-1] + fibo[n-2] for n in range(2, 10)]
print(fibo(10))
def greet(name):
    return f"Hello, {name}!"

print(greet("Alice"))
def greet(name):
    print(f"Hello, {name}!")

greet("Alice")
def generate_fibonacci(n):
    fib = [0, 1]
    while len(fib) < n:
        fib.append(fib[-1] + fib[-2])
    return fib[:n]

# Example usage:
print(generate_fibonacci(10))  # Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
